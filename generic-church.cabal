name:                generic-church
version:             0.1.0.0
synopsis:            Automatically convert Generic instances to and from church representations
description:
  This package provides two functions, @'toChurch'@ and @'fromChurch'@. These form
  an isomorphism between a type and its church representation of a type
  .
  To use this, simply define an empty instance of @'ChurchRep'@ for a type with a
  'Generic' instance and defaulting magic will take care of the rest. For example
  .
  > {-# LANGUAGE DeriveGeneric #-}
  > data MyType = Foo Int Bool | Bar | Baz Char
  >             deriving(Generic, Show)
  >
  > instance ChurchRep MyType
  .
  Then if we fire up GHCi
  .
  > Data.Char> toChurch (Foo 1 True) (\int bool -> if bool then int else int + 1) 0 ord
  >      2
  > Data.Char> fromChurch (\foo bar baz -> bar) :: MyType
  >      Bar
  fizz 
license:             MIT
license-file:        LICENSE
author:              Danny Gratzer
maintainer:          danny.gratzer@gmail.com
category:            Generics
build-type:          Simple
cabal-version:       >=1.10
library
        hs-source-dirs:      src
        exposed-modules:     Data.Church
        other-modules:       Data.Church.Internal.TF,
                             Data.Church.Internal.ToChurch
  build-depends:       base >=4.6 && <4.7, tagged
  default-language:    Haskell2010
Test-Suite test-generic-church
  type:               exitcode-stdio-1.0
  main-is:            Main.hs
  hs-source-dirs:     test
  build-depends:      base >=4.6 && <4.7,
                      test-framework,
                      test-framework-hunit,
                      generic-church,
                      HUnit
